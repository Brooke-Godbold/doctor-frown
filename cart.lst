------- FILE doctorfrown.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include required filed with VCS register memory mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE doctorfrown.asm
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE doctorfrown.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Declare variables starting from memory address $80
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U0096 ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   BackgroundColor byte.b		; color of the background
     16 U0081		       00	   PlayerXPos byte.b		; player x-position
     17 U0082		       00	   PlayerYPos byte.b		; player y-position
     18 U0083		       00	   EnemyXPos  byte.b		; enemy x-position
     19 U0084		       00	   EnemyYPos  byte.b		; enemy y-position
     20 U0085		       00	   EnemyMoveCheck byte.b		; check for if enemy can move
     21 U0086		       00	   GameState  byte.b		; state of game, bit 0 value of 0 is game over, bit 1 value shows if smile is held
     22 U0087		       00	   SmileXPos  byte.b		; smile x-position
     23 U0088		       00	   SmileYPos  byte.b		; smile y-position
     24 U0089		       00	   Random     byte.b		; random number generated to set smile position, number of smiles before frown appears, and frames Doctor Frown will appear for
     25 U008a		       00	   FrownTime  byte.b		; amount of frames left that Doctor Frown will appear for
     26 U008b		       00	   SmileCount byte.b		; amount of smiles held for this round
     27 U008c		       00	   ScoreSprite byte.b		; stores sprite bit pattern for score
     28 U008d		       00	   TimerSprite byte.b		; stores sprite bit pattern for timer
     29 U008e		       00 00	   OnesDigitOffset word.w		; lookup table offset for digit units
     30 U0090		       00 00	   TensDigitOffset word.w		; lookup table offset for digit tens
     31 U0092		       00	   Score      byte.b		; 2-digit score stored as BCD
     32 U0093		       00	   FrownCounts byte.b		; 2-digit timer stored as BCD, amount of counts left for Doctor Frown
     33 U0094		       00	   Temp       byte.b		; variable to store temporary values
     34 U0095		       00	   AudioTime  byte.b		; timer for current audio round
     35 U0096
     36 U0096							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     37 U0096							;; Initialize constants
     38 U0096							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     39 U0096		       00 04	   PLAYER_HEIGHT =	4
     40 U0096		       00 09	   SPRITE_HEIGHT =	9
     41 U0096		       00 05	   DIGITS_HEIGHT =	5
     42 U0096
     43 U0096							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44 U0096							;; Start ROM code at memory address $F000
     45 U0096							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     46  10000 ????				       seg	code
     47  f000					      org	$F000
     48  f000
     49  f000				   Reset
      0  f000					      CLEAN_START		; reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     51  f00b
     52  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     53  f00b							;; Initialize RAM variables and TIA registers
     54  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     55  f00b		       a9 35		      lda	#$35
     56  f00d		       85 80		      sta	BackgroundColor	; store background color as orange
     57  f00f		       a9 3e		      lda	#62
     58  f011		       85 81		      sta	PlayerXPos	; start player x-position at 68
     59  f013		       a9 0a		      lda	#10
     60  f015		       85 82		      sta	PlayerYPos	; start player y-position at 10
     61  f017		       a9 3e		      lda	#62
     62  f019		       85 83		      sta	EnemyXPos	; start enemy y-position at 62
     63  f01b		       a9 4b		      lda	#75
     64  f01d		       85 84		      sta	EnemyYPos	; start enemy y-position at 75
     65  f01f		       a9 05		      lda	#5
     66  f021		       85 85		      sta	EnemyMoveCheck	; set enemy move check to 5
     67  f023		       a9 01		      lda	#1
     68  f025		       85 86		      sta	GameState	; set game state to active, with no smiles held
     69  f027		       a9 3e		      lda	#62
     70  f029		       85 87		      sta	SmileXPos	; start smile x-position at 62
     71  f02b		       a9 53		      lda	#83
     72  f02d		       85 88		      sta	SmileYPos	; start smile y-position at 83
     73  f02f		       a9 d4		      lda	#%11010100
     74  f031		       85 89		      sta	Random	; Random = $D4
     75  f033		       a9 00		      lda	#0
     76  f035		       85 8a		      sta	FrownTime	; set FrownTime to 0
     77  f037		       85 93		      sta	FrownCounts	; set FrownCounts to 0
     78  f039		       85 8b		      sta	SmileCount	; set SmileCount to 0
     79  f03b		       a9 fc		      lda	#$FC
     80  f03d		       85 08		      sta	COLUPF	; set ball color to gold
     81  f03f		       a9 1c		      lda	#$1C
     82  f041		       85 07		      sta	COLUP1	; set smile color to yellow
     83  f043		       a9 79		      lda	#$79
     84  f045		       85 06		      sta	COLUP0	; set frown color to purple
     85  f047		       a9 00		      lda	#0
     86  f049		       85 92		      sta	Score	; set score to 0
     87  f04b		       a9 3c		      lda	#60
     88  f04d		       85 95		      sta	AudioTime	; set audio time to 60 (frames)
     89  f04f		       a9 0c		      lda	#12
     90  f051		       85 16		      sta	AUDC1	; set Audio tone
     91  f053
     92  f053							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     93  f053							;; Start main display loop and frame rendering
     94  f053							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     95  f053				   StartFrame
     96  f053
     97  f053							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f053							;; Display 3 Lines of VSYNC
     99  f053							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    100  f053		       a9 02		      lda	#2
    101  f055		       85 01		      sta	VBLANK
    102  f057		       85 00		      sta	VSYNC	; turn on VBLANK and VSYNC
    103  f059
    104  f059		       85 02		      sta	WSYNC
    105  f05b		       85 02		      sta	WSYNC
    106  f05d		       85 02		      sta	WSYNC	; display 3 lines of VSYNC
    107  f05f
    108  f05f		       a9 00		      lda	#0
    109  f061		       85 00		      sta	VSYNC	; turn off VSYNC
    110  f063
    111  f063							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    112  f063							;; Calculations and tasks performed in VBLANK
    113  f063							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    114  f063		       a5 81		      lda	PlayerXPos
    115  f065		       a0 04		      ldy	#4
    116  f067		       20 a2 f2 	      jsr	SetObjectXPos	; set ball (player) x-position
    117  f06a
    118  f06a		       a5 83		      lda	EnemyXPos
    119  f06c		       a0 00		      ldy	#0
    120  f06e		       20 a2 f2 	      jsr	SetObjectXPos	; set player 0 (enemy) x-position
    121  f071
    122  f071		       a5 87		      lda	SmileXPos
    123  f073		       a0 01		      ldy	#1
    124  f075		       20 a2 f2 	      jsr	SetObjectXPos	; set player 1 (smile) x-position
    125  f078
    126  f078		       20 db f2 	      jsr	CalculateDigitOffset	; calculate the scoreboard digit lookup table offset
    127  f07b
    128  f07b		       85 02		      sta	WSYNC	; HMOVE must occur immediately as HBLANK starts, so begin a WSYNC command before
    129  f07d		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
    130  f07f
    131  f07f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    132  f07f							;; Display remaining 32 Lines of VBLANK
    133  f07f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    134  f07f		       a2 20		      ldx	#32
    135  f081				   LoopVBlank
    136  f081		       85 02		      sta	WSYNC
    137  f083		       ca		      dex
    138  f084		       d0 fb		      bne	LoopVBlank	; display remaining 32 lines of VBLANK
    139  f086
    140  f086		       85 01		      sta	VBLANK	; turn off VBLANK
    141  f088
    142  f088							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    143  f088							;; Clear playfield for scoreboard
    144  f088							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    145  f088		       a9 00		      lda	#0
    146  f08a		       85 09		      sta	COLUBK
    147  f08c		       85 0d		      sta	PF0
    148  f08e		       85 0e		      sta	PF1
    149  f090		       85 0f		      sta	PF2
    150  f092		       85 1b		      sta	GRP0
    151  f094		       85 1c		      sta	GRP1
    152  f096		       85 0a		      sta	CTRLPF	; clear TIA registers to display scoreboard
    153  f098
    154  f098		       a9 1e		      lda	#$1E
    155  f09a		       85 08		      sta	COLUPF	; set digit color to yellow
    156  f09c
    157  f09c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    158  f09c							;; Display the 10 visible scanlines of the scoreboard
    159  f09c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    160  f09c		       a2 05		      ldx	#DIGITS_HEIGHT
    161  f09e
    162  f09e				   .ScoreDigitLoop
    163  f09e		       a4 90		      ldy	TensDigitOffset
    164  f0a0		       b9 0e f3 	      lda	Digits,Y	; load tens digit bit pattern from lookup table
    165  f0a3		       29 f0		      and	#$F0	; mask/remove graphic for units digit
    166  f0a5		       85 8c		      sta	ScoreSprite
    167  f0a7
    168  f0a7		       a4 8e		      ldy	OnesDigitOffset
    169  f0a9		       b9 0e f3 	      lda	Digits,Y	; load ones digit bit pattern from lookup table
    170  f0ac		       29 0f		      and	#$0F	; mask/remove graphic for tens digit
    171  f0ae		       05 8c		      ora	ScoreSprite	; OR, has effect of merging, merge Unit with Tens
    172  f0b0		       85 8c		      sta	ScoreSprite
    173  f0b2		       85 02		      sta	WSYNC
    174  f0b4		       85 0e		      sta	PF1	; update PF1 (middle) to display score sprite
    175  f0b6
    176  f0b6		       a4 91		      ldy	TensDigitOffset+1	; perform above for the timer
    177  f0b8		       b9 0e f3 	      lda	Digits,Y
    178  f0bb		       29 f0		      and	#$F0
    179  f0bd		       85 8d		      sta	TimerSprite
    180  f0bf
    181  f0bf		       a4 8f		      ldy	OnesDigitOffset+1
    182  f0c1		       b9 0e f3 	      lda	Digits,Y
    183  f0c4		       29 0f		      and	#$0F
    184  f0c6		       05 8d		      ora	TimerSprite
    185  f0c8		       85 8d		      sta	TimerSprite
    186  f0ca
    187  f0ca		       20 fb f2 	      jsr	Sleep12Cycles	; wait for beam to reach position to display timer
    188  f0cd
    189  f0cd		       85 0e		      sta	PF1
    190  f0cf
    191  f0cf		       a4 8c		      ldy	ScoreSprite	; preload for next scanline
    192  f0d1		       85 02		      sta	WSYNC	; wait for next scanline
    193  f0d3
    194  f0d3		       84 0e		      sty	PF1	; update playfield for score
    195  f0d5		       e6 90		      inc	TensDigitOffset
    196  f0d7		       e6 91		      inc	TensDigitOffset+1
    197  f0d9		       e6 8e		      inc	OnesDigitOffset
    198  f0db		       e6 8f		      inc	OnesDigitOffset+1
    199  f0dd
    200  f0dd		       20 fb f2 	      jsr	Sleep12Cycles
    201  f0e0
    202  f0e0		       ca		      dex
    203  f0e1		       85 0e		      sta	PF1
    204  f0e3		       d0 b9		      bne	.ScoreDigitLoop	; loop for height of digits
    205  f0e5
    206  f0e5		       85 02		      sta	WSYNC
    207  f0e7
    208  f0e7		       a9 00		      lda	#0
    209  f0e9		       85 0d		      sta	PF0
    210  f0eb		       85 0e		      sta	PF1
    211  f0ed		       85 0f		      sta	PF2
    212  f0ef
    213  f0ef		       85 02		      sta	WSYNC
    214  f0f1		       85 02		      sta	WSYNC
    215  f0f3		       85 02		      sta	WSYNC
    216  f0f5		       85 02		      sta	WSYNC	; 4 lines of padding for scoreboard
    217  f0f7
    218  f0f7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    219  f0f7							;; Display the remaining 178 visible scanlines [2-line Kernel, 88 scanlines]
    220  f0f7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    221  f0f7				   VisibleScanline
    222  f0f7		       a5 80		      lda	BackgroundColor
    223  f0f9		       85 09		      sta	COLUBK	; set background color TIA register
    224  f0fb
    225  f0fb		       a9 20		      lda	#%00100000
    226  f0fd		       85 0a		      sta	CTRLPF	; set the ball width to 2 (5th bit set)
    227  f0ff
    228  f0ff		       a2 58		      ldx	#88
    229  f101				   .GameLineLoop
    230  f101
    231  f101		       a5 86		      lda	GameState
    232  f103		       29 01		      and	#%00000001
    233  f105		       f0 0c		      beq	.GameStateCheck	; if Game Over, skip drawing player
    234  f107
    235  f107				   .DrawPlayerCheck
    236  f107		       8a		      txa
    237  f108		       38		      sec
    238  f109		       e5 82		      sbc	PlayerYPos
    239  f10b		       c9 04		      cmp	#PLAYER_HEIGHT	; compare current scanline with player y-position
    240  f10d		       a9 02		      lda	#%00000010	; draw ball
    241  f10f		       90 02		      bcc	.GameStateCheck	; if scanline within player height, draw the player
    242  f111		       a9 00		      lda	#0	; skip drawing ball
    243  f113
    244  f113				   .GameStateCheck
    245  f113		       85 02		      sta	WSYNC
    246  f115		       85 1f		      sta	ENABL	; store ball into TIA register
    247  f117
    248  f117		       a9 00		      lda	#0
    249  f119		       05 93		      ora	FrownCounts
    250  f11b		       d0 19		      bne	.DrawEnemyCheck	; if FrownCounts not 0, draw enemy
    251  f11d
    252  f11d				   .DrawSmileCheck
    253  f11d		       8a		      txa		; else, draw smile
    254  f11e		       38		      sec
    255  f11f		       e5 88		      sbc	SmileYPos
    256  f121		       c9 09		      cmp	#SPRITE_HEIGHT
    257  f123		       90 02		      bcc	.DrawSmile
    258  f125		       a9 00		      lda	#0
    259  f127
    260  f127				   .DrawSmile
    261  f127		       a8		      tay
    262  f128		       a9 05		      lda	#%00000101
    263  f12a		       85 05		      sta	NUSIZ1	; stretch player1 sprite
    264  f12c		       b9 05 f3 	      lda	SmileSprite,Y
    265  f12f		       85 02		      sta	WSYNC
    266  f131		       85 1c		      sta	GRP1
    267  f133		       4c 4c f1 	      jmp	.FinishGameLoop	; skip over drawing enemy
    268  f136
    269  f136				   .DrawEnemyCheck
    270  f136		       8a		      txa
    271  f137		       38		      sec
    272  f138		       e5 84		      sbc	EnemyYPos
    273  f13a		       c9 09		      cmp	#SPRITE_HEIGHT
    274  f13c		       90 02		      bcc	.DrawEnemy
    275  f13e		       a9 00		      lda	#0
    276  f140
    277  f140				   .DrawEnemy
    278  f140		       a8		      tay
    279  f141		       a9 05		      lda	#%00000101
    280  f143		       85 04		      sta	NUSIZ0	; stretch player0 sprite
    281  f145		       b9 fc f2 	      lda	FrownSprite,Y
    282  f148		       85 02		      sta	WSYNC
    283  f14a		       85 1b		      sta	GRP0
    284  f14c
    285  f14c				   .FinishGameLoop
    286  f14c		       ca		      dex
    287  f14d		       d0 b2		      bne	.GameLineLoop	; loop back to top whilst drawing visible scanlines
    288  f14f
    289  f14f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    290  f14f							;; Start Overscan
    291  f14f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    292  f14f		       a9 02		      lda	#2
    293  f151		       85 01		      sta	VBLANK	; turn on VBLANK
    294  f153
    295  f153		       a2 19		      ldx	#25
    296  f155				   LoopOverscan
    297  f155		       85 02		      sta	WSYNC
    298  f157		       ca		      dex
    299  f158		       d0 fb		      bne	LoopOverscan	; display 25 lines of VBLANK
    300  f15a
    301  f15a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    302  f15a							;; Process joystick input checks
    303  f15a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    304  f15a		       85 02		      sta	WSYNC
    305  f15c
    306  f15c		       a5 86		      lda	GameState
    307  f15e		       29 01		      and	#%00000001
    308  f160		       f0 3c		      beq	EndPlayerInput	; if Game Over, ignore player input
    309  f162
    310  f162				   CheckP0Up
    311  f162		       a9 10		      lda	#%00010000	; player0 joystick up
    312  f164		       2c 80 02 	      bit	SWCHA
    313  f167		       d0 08		      bne	CheckP0Down	; if bit pattern doesn't match, bypass
    314  f169
    315  f169		       a9 50		      lda	#80
    316  f16b		       c5 82		      cmp	PlayerYPos
    317  f16d		       f0 02		      beq	CheckP0Down	; prevent moving beyond top of screen
    318  f16f		       e6 82		      inc	PlayerYPos
    319  f171
    320  f171				   CheckP0Down
    321  f171		       a9 20		      lda	#%00100000	; player0 joystick down
    322  f173		       2c 80 02 	      bit	SWCHA
    323  f176		       d0 08		      bne	CheckP0Left	; if bit pattern doesn't match, bypass
    324  f178
    325  f178		       a9 05		      lda	#5
    326  f17a		       c5 82		      cmp	PlayerYPos
    327  f17c		       f0 02		      beq	CheckP0Left	; prevent moving beyond bottom of screen
    328  f17e		       c6 82		      dec	PlayerYPos
    329  f180
    330  f180				   CheckP0Left
    331  f180		       a9 40		      lda	#%01000000	; player0 joystick left
    332  f182		       2c 80 02 	      bit	SWCHA
    333  f185		       d0 08		      bne	CheckP0right	; if bit pattern doesn't match, bypass
    334  f187
    335  f187		       a9 01		      lda	#1
    336  f189		       c5 81		      cmp	PlayerXPos
    337  f18b		       f0 02		      beq	CheckP0right	; prevent moving beyond left of screen
    338  f18d		       c6 81		      dec	PlayerXPos
    339  f18f
    340  f18f				   CheckP0right
    341  f18f		       a9 80		      lda	#%10000000	; player0 joystick right
    342  f191		       2c 80 02 	      bit	SWCHA
    343  f194		       d0 08		      bne	EndPlayerInput	; if bit pattern doesn't match, bypass
    344  f196
    345  f196		       a9 8c		      lda	#140
    346  f198		       c5 81		      cmp	PlayerXPos
    347  f19a		       f0 02		      beq	EndPlayerInput	; prevent moving beyond right of screen
    348  f19c		       e6 81		      inc	PlayerXPos
    349  f19e
    350  f19e				   EndPlayerInput
    351  f19e
    352  f19e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    353  f19e							;; CheckFrownTime
    354  f19e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    355  f19e				   CheckFrownTime
    356  f19e		       a9 00		      lda	#0
    357  f1a0		       05 93		      ora	FrownCounts
    358  f1a2		       d0 3c		      bne	MoveEnemy	; if FrownCounts not 0, move to Enemy Logic
    359  f1a4
    360  f1a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    361  f1a4							;; Move Smile
    362  f1a4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    363  f1a4				   MoveSmile
    364  f1a4		       85 02		      sta	WSYNC
    365  f1a6
    366  f1a6		       a9 35		      lda	#$35
    367  f1a8		       85 80		      sta	BackgroundColor
    368  f1aa
    369  f1aa		       a5 88		      lda	SmileYPos
    370  f1ac		       18		      clc
    371  f1ad		       c9 05		      cmp	#5
    372  f1af		       30 05		      bmi	.NewSmilePos	; if smile y-pos < 5, reset y-pos
    373  f1b1		       c6 88		      dec	SmileYPos	; else, decrement smile y-pos
    374  f1b3		       4c b9 f1 	      jmp	ProcessSmileAudio
    375  f1b6
    376  f1b6				   .NewSmilePos
    377  f1b6		       20 cf f2 	      jsr	ResetSmilePos
    378  f1b9
    379  f1b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    380  f1b9							;; Process Smile Audio
    381  f1b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    382  f1b9				   ProcessSmileAudio
    383  f1b9		       85 02		      sta	WSYNC
    384  f1bb
    385  f1bb		       c6 95		      dec	AudioTime
    386  f1bd		       a9 01		      lda	#1
    387  f1bf		       85 1a		      sta	AUDV1
    388  f1c1
    389  f1c1		       a9 2d		      lda	#45
    390  f1c3		       c5 95		      cmp	AudioTime
    391  f1c5		       30 0f		      bmi	.PlaySmileAudio	; if audio time is above 45, play audio
    392  f1c7
    393  f1c7		       a9 00		      lda	#0
    394  f1c9		       85 1a		      sta	AUDV1
    395  f1cb		       c5 95		      cmp	AudioTime
    396  f1cd		       d0 71		      bne	CheckCollisions	; if audio time is not 0, jump to collision check
    397  f1cf
    398  f1cf		       a9 5a		      lda	#90
    399  f1d1		       85 95		      sta	AudioTime	; else, reset audio time to 90
    400  f1d3		       4c 40 f2 	      jmp	CheckCollisions
    401  f1d6
    402  f1d6				   .PlaySmileAudio
    403  f1d6		       a9 19		      lda	#25
    404  f1d8		       38		      sec
    405  f1d9		       e5 8b		      sbc	SmileCount
    406  f1db		       85 18		      sta	AUDF1
    407  f1dd		       4c 40 f2 	      jmp	CheckCollisions
    408  f1e0
    409  f1e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    410  f1e0							;; Move enemy
    411  f1e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    412  f1e0				   MoveEnemy
    413  f1e0		       85 02		      sta	WSYNC
    414  f1e2
    415  f1e2		       a5 86		      lda	GameState
    416  f1e4		       29 01		      and	#%00000001
    417  f1e6		       f0 58		      beq	CheckCollisions	; if Game Over, jump straight to processing collisions
    418  f1e8
    419  f1e8		       c6 85		      dec	EnemyMoveCheck
    420  f1ea
    421  f1ea		       a9 00		      lda	#0
    422  f1ec		       05 8a		      ora	FrownTime
    423  f1ee		       d0 09		      bne	DecrementFrownTime	; if FrownTime not 0, decrement FrownTime
    424  f1f0
    425  f1f0		       c6 93		      dec	FrownCounts	; else, decrement the FrownCount
    426  f1f2		       a9 78		      lda	#120
    427  f1f4		       85 8a		      sta	FrownTime	; reset FrownTime back to 120
    428  f1f6		       4c fb f1 	      jmp	CheckCanEnemyMove
    429  f1f9
    430  f1f9				   DecrementFrownTime
    431  f1f9		       c6 8a		      dec	FrownTime
    432  f1fb
    433  f1fb				   CheckCanEnemyMove
    434  f1fb		       a9 00		      lda	#0
    435  f1fd		       c5 85		      cmp	EnemyMoveCheck
    436  f1ff		       d0 22		      bne	ProcessEnemyAudio	; if enemy shouldn't move, jump to process enemy audio
    437  f201		       a9 04		      lda	#4
    438  f203		       85 85		      sta	EnemyMoveCheck
    439  f205
    440  f205				   CheckEnemyY
    441  f205		       a5 82		      lda	PlayerYPos
    442  f207
    443  f207		       c5 84		      cmp	EnemyYPos
    444  f209		       f0 09		      beq	CheckEnemyX
    445  f20b		       30 05		      bmi	EnemyMoveDown
    446  f20d
    447  f20d				   EnemyMoveUp
    448  f20d		       e6 84		      inc	EnemyYPos
    449  f20f		       4c 14 f2 	      jmp	CheckEnemyX
    450  f212
    451  f212				   EnemyMoveDown
    452  f212		       c6 84		      dec	EnemyYPos
    453  f214
    454  f214				   CheckEnemyX
    455  f214		       a5 81		      lda	PlayerXPos
    456  f216
    457  f216		       c5 83		      cmp	EnemyXPos
    458  f218		       f0 09		      beq	ProcessEnemyAudio
    459  f21a		       30 05		      bmi	EnemyMoveLeft
    460  f21c
    461  f21c				   EnemyMoveRight
    462  f21c		       e6 83		      inc	EnemyXPos
    463  f21e		       4c 23 f2 	      jmp	ProcessEnemyAudio
    464  f221
    465  f221				   EnemyMoveLeft
    466  f221		       c6 83		      dec	EnemyXPos
    467  f223
    468  f223							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    469  f223							;; Process Enemy Audio
    470  f223							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    471  f223				   ProcessEnemyAudio
    472  f223		       85 02		      sta	WSYNC
    473  f225
    474  f225		       c6 95		      dec	AudioTime
    475  f227		       a9 01		      lda	#1
    476  f229		       85 1a		      sta	AUDV1
    477  f22b
    478  f22b		       a9 14		      lda	#20
    479  f22d		       c5 95		      cmp	AudioTime
    480  f22f		       30 0f		      bmi	CheckCollisions	; if audio time is above 20, play audio
    481  f231
    482  f231		       a9 00		      lda	#0
    483  f233		       85 1a		      sta	AUDV1
    484  f235		       c5 95		      cmp	AudioTime
    485  f237		       d0 07		      bne	CheckCollisions	; if audio time is not 0, jump to collision check
    486  f239
    487  f239		       a9 28		      lda	#40
    488  f23b		       85 95		      sta	AudioTime	; else, reset audio time to 40
    489  f23d		       4c 40 f2 	      jmp	CheckCollisions
    490  f240
    491  f240							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    492  f240							;; Check Collision Data
    493  f240							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    494  f240				   CheckCollisions
    495  f240
    496  f240				   CheckSmileCollision
    497  f240		       85 02		      sta	WSYNC
    498  f242
    499  f242		       a9 40		      lda	#%01000000	; bit 6 set for collision between P1 and Ball
    500  f244		       24 03		      bit	CXP1FB
    501  f246		       f0 2d		      beq	CheckEnemyCollision
    502  f248
    503  f248				   AddSmile
    504  f248		       e6 8b		      inc	SmileCount
    505  f24a
    506  f24a		       f8		      sed		; increment score for BCD
    507  f24b		       a5 92		      lda	Score
    508  f24d		       18		      clc
    509  f24e		       69 01		      adc	#1
    510  f250		       85 92		      sta	Score
    511  f252		       d8		      cld
    512  f253
    513  f253		       20 cf f2 	      jsr	ResetSmilePos
    514  f256
    515  f256		       a9 05		      lda	#5
    516  f258		       c5 8b		      cmp	SmileCount
    517  f25a		       d0 19		      bne	CheckEnemyCollision
    518  f25c		       85 93		      sta	FrownCounts	; set FrownCounts to 5
    519  f25e		       a9 78		      lda	#120
    520  f260		       85 8a		      sta	FrownTime	; set FrownTime to 120
    521  f262		       a9 00		      lda	#0
    522  f264		       85 8b		      sta	SmileCount
    523  f266		       a9 61		      lda	#$61
    524  f268		       85 80		      sta	BackgroundColor
    525  f26a
    526  f26a		       a9 1e		      lda	#30
    527  f26c		       85 18		      sta	AUDF1	; start enemy audio
    528  f26e
    529  f26e		       a9 30		      lda	#48	; load screen mid point (192 / 2 = 96 => / 2 [2-line kernel] = 48)
    530  f270		       38		      sec
    531  f271		       e5 82		      sbc	PlayerYPos	; subtract this from player y-pos
    532  f273		       85 84		      sta	EnemyYPos	; set as new enemy y-pos, will prevent enemy from spawning on player
    533  f275							; and negative wrap-around should prevent enemy going off screen
    534  f275
    535  f275				   CheckEnemyCollision
    536  f275		       85 02		      sta	WSYNC
    537  f277
    538  f277		       a9 40		      lda	#%01000000	; bit 6 set for collision between P0 and Ball
    539  f279		       24 02		      bit	CXP0FB	; compare with bit in collision register
    540  f27b		       d0 03		      bne	GameOver	; if not zero, N flag set, collision occured
    541  f27d		       4c 90 f2 	      jmp	ProcessSwitches
    542  f280
    543  f280				   GameOver
    544  f280		       a9 30		      lda	#$30
    545  f282		       85 80		      sta	BackgroundColor	; set background color to red
    546  f284		       a9 46		      lda	#$46
    547  f286		       85 06		      sta	COLUP0	; set doctor frown color to red
    548  f288		       a9 00		      lda	#%00000000
    549  f28a		       85 86		      sta	GameState	; set Game State to Game Over
    550  f28c		       a9 00		      lda	#0
    551  f28e		       85 1a		      sta	AUDV1
    552  f290
    553  f290							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    554  f290							;; Process Switch Input on the GameBoard
    555  f290							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    556  f290				   ProcessSwitches
    557  f290		       ad 82 02 	      lda	SWCHB	; load in the state of the switches
    558  f293		       4a		      lsr		; D0 is now in C
    559  f294		       b0 03		      bcs	EndFrame	; if D0 was on, the RESET switch was not held
    560  f296		       4c 00 f0 	      jmp	Reset
    561  f299
    562  f299							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    563  f299							;; Loop back to start next frame
    564  f299							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    565  f299				   EndFrame
    566  f299		       85 2c		      sta	CXCLR	; clear collision flags before next frame
    567  f29b
    568  f29b		       a9 00		      lda	#0
    569  f29d		       85 01		      sta	VBLANK	; turn off VBLANK
    570  f29f
    571  f29f		       4c 53 f0 	      jmp	StartFrame
    572  f2a2
    573  f2a2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    574  f2a2							;; Handle object horizontal position with fine offset
    575  f2a2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    576  f2a2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    577  f2a2							;; A: target x-coordinate in pixels of object
    578  f2a2							;; Y: object type (0: player0, 1: player1, 2: missile0, 3: missile1, 4: ball)
    579  f2a2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    580  f2a2				   SetObjectXPos subroutine
    581  f2a2		       85 02		      sta	WSYNC	; start a fresh new scanline
    582  f2a4		       38		      sec		; make sure carry-flag is set before subtraction
    583  f2a5				   .Div15Loop
    584  f2a5		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    585  f2a7		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    586  f2a9		       49 07		      eor	#7	; handle offset range from -8 to 7
    587  f2ab		       0a		      asl
    588  f2ac		       0a		      asl
    589  f2ad		       0a		      asl
    590  f2ae		       0a		      asl		; four shift lefts to get only the top 4 bits
    591  f2af		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    592  f2b2		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    593  f2b5		       60		      rts
    594  f2b6
    595  f2b6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    596  f2b6							;; Generate random value using Linear-Feedback Shift Register
    597  f2b6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    598  f2b6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    599  f2b6							;; Generate a LFSR random number
    600  f2b6							;; Divide random value by 2 to limit range of result to screen width
    601  f2b6							;; Add 15 to compensate for left playfield width
    602  f2b6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    603  f2b6				   GetRandom  subroutine
    604  f2b6		       a5 89		      lda	Random
    605  f2b8		       0a		      asl
    606  f2b9		       45 89		      eor	Random
    607  f2bb		       0a		      asl
    608  f2bc		       45 89		      eor	Random
    609  f2be		       0a		      asl
    610  f2bf		       0a		      asl
    611  f2c0		       45 89		      eor	Random
    612  f2c2		       0a		      asl
    613  f2c3		       26 89		      rol	Random	; perform series of shifts and bit operations
    614  f2c5
    615  f2c5		       4a		      lsr		; divide value by 4 with 2 right shifts
    616  f2c6		       85 89		      sta	Random
    617  f2c8		       a9 05		      lda	#5
    618  f2ca		       65 89		      adc	Random	; adds 5 to compensate for left side playfield
    619  f2cc		       85 89		      sta	Random	; set random
    620  f2ce
    621  f2ce		       60		      rts
    622  f2cf
    623  f2cf							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    624  f2cf							;; Reset Smile Position
    625  f2cf							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    626  f2cf				   ResetSmilePos subroutine
    627  f2cf		       20 b6 f2 	      jsr	GetRandom
    628  f2d2		       a5 89		      lda	Random
    629  f2d4		       85 87		      sta	SmileXPos
    630  f2d6		       a9 53		      lda	#83
    631  f2d8		       85 88		      sta	SmileYPos
    632  f2da
    633  f2da		       60		      rts
    634  f2db
    635  f2db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    636  f2db							;; Handle scoreboard digits to be displayed
    637  f2db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    638  f2db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    639  f2db							;; For lo-byte, multiply by 5 to get offset
    640  f2db							;;	 - (N*2*2)+N
    641  f2db							;;
    642  f2db							;; For hi-byte, divide by 16 then multiply by 5 to get offset
    643  f2db							;;	 - (N/2/2)+(N/2/2/2/2)
    644  f2db							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    645  f2db				   CalculateDigitOffset subroutine
    646  f2db		       a2 01		      ldx	#1
    647  f2dd				   .PrepareScoreLoop
    648  f2dd		       b5 92		      lda	Score,X	; retrieve timer (X=1), then score (X=0)
    649  f2df		       29 0f		      and	#$0F	; AND to mask first 4 bits to 0, retaining last 4 only
    650  f2e1		       85 94		      sta	Temp
    651  f2e3		       0a		      asl
    652  f2e4		       0a		      asl
    653  f2e5		       65 94		      adc	Temp	; multiply A by 5
    654  f2e7		       95 8e		      sta	OnesDigitOffset,X
    655  f2e9
    656  f2e9		       b5 92		      lda	Score,X
    657  f2eb		       29 f0		      and	#$F0	; AND to mask last 4 bits to 0, retaining first 4 only
    658  f2ed		       4a		      lsr
    659  f2ee		       4a		      lsr
    660  f2ef		       85 94		      sta	Temp	; divide by 4
    661  f2f1		       4a		      lsr
    662  f2f2		       4a		      lsr		; divide by 16
    663  f2f3		       65 94		      adc	Temp
    664  f2f5		       95 90		      sta	TensDigitOffset,X
    665  f2f7
    666  f2f7		       ca		      dex
    667  f2f8		       10 e3		      bpl	.PrepareScoreLoop	; loop twice, while X >= 0
    668  f2fa
    669  f2fa		       60		      rts
    670  f2fb
    671  f2fb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    672  f2fb							;; Wait 12 cycles
    673  f2fb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    674  f2fb				   Sleep12Cycles subroutine
    675  f2fb		       60		      rts		; total cycles used for instructions - 12
    676  f2fc
    677  f2fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    678  f2fc							;; ROM Lookup Tables
    679  f2fc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    680  f2fc				   FrownSprite
    681  f2fc		       00		      .byte.b	#%00000000
    682  f2fd		       1c		      .byte.b	#%00011100
    683  f2fe		       3e		      .byte.b	#%00111110
    684  f2ff		       5d		      .byte.b	#%01011101
    685  f300		       63		      .byte.b	#%01100011
    686  f301		       7f		      .byte.b	#%01111111
    687  f302		       6b		      .byte.b	#%01101011
    688  f303		       2a		      .byte.b	#%00101010
    689  f304		       1c		      .byte.b	#%00011100
    690  f305
    691  f305				   SmileSprite
    692  f305		       00		      .byte.b	#%00000000
    693  f306		       1c		      .byte.b	#%00011100
    694  f307		       3e		      .byte.b	#%00111110
    695  f308		       63		      .byte.b	#%01100011
    696  f309		       5d		      .byte.b	#%01011101
    697  f30a		       7f		      .byte.b	#%01111111
    698  f30b		       6b		      .byte.b	#%01101011
    699  f30c		       2a		      .byte.b	#%00101010
    700  f30d		       1c		      .byte.b	#%00011100
    701  f30e
    702  f30e				   Digits
    703  f30e		       77		      .byte.b	%01110111	; ### ###
    704  f30f		       55		      .byte.b	%01010101	; # # # #
    705  f310		       55		      .byte.b	%01010101	; # # # #
    706  f311		       55		      .byte.b	%01010101	; # # # #
    707  f312		       77		      .byte.b	%01110111	; ### ###
    708  f313
    709  f313		       11		      .byte.b	%00010001	;   #	 #
    710  f314		       11		      .byte.b	%00010001	;   #	 #
    711  f315		       11		      .byte.b	%00010001	;   #	 #
    712  f316		       11		      .byte.b	%00010001	;   #	 #
    713  f317		       11		      .byte.b	%00010001	;   #	 #
    714  f318
    715  f318		       77		      .byte.b	%01110111	; ### ###
    716  f319		       11		      .byte.b	%00010001	;   #	 #
    717  f31a		       77		      .byte.b	%01110111	; ### ###
    718  f31b		       44		      .byte.b	%01000100	; #   #
    719  f31c		       77		      .byte.b	%01110111	; ### ###
    720  f31d
    721  f31d		       77		      .byte.b	%01110111	; ### ###
    722  f31e		       11		      .byte.b	%00010001	;   #	 #
    723  f31f		       33		      .byte.b	%00110011	;  ##	##
    724  f320		       11		      .byte.b	%00010001	;   #	 #
    725  f321		       77		      .byte.b	%01110111	; ### ###
    726  f322
    727  f322		       55		      .byte.b	%01010101	; # # # #
    728  f323		       55		      .byte.b	%01010101	; # # # #
    729  f324		       77		      .byte.b	%01110111	; ### ###
    730  f325		       11		      .byte.b	%00010001	;   #	 #
    731  f326		       11		      .byte.b	%00010001	;   #	 #
    732  f327
    733  f327		       77		      .byte.b	%01110111	; ### ###
    734  f328		       44		      .byte.b	%01000100	; #   #
    735  f329		       77		      .byte.b	%01110111	; ### ###
    736  f32a		       11		      .byte.b	%00010001	;   #	 #
    737  f32b		       77		      .byte.b	%01110111	; ### ###
    738  f32c
    739  f32c		       77		      .byte.b	%01110111	; ### ###
    740  f32d		       44		      .byte.b	%01000100	; #   #
    741  f32e		       77		      .byte.b	%01110111	; ### ###
    742  f32f		       55		      .byte.b	%01010101	; # # # #
    743  f330		       77		      .byte.b	%01110111	; ### ###
    744  f331
    745  f331		       77		      .byte.b	%01110111	; ### ###
    746  f332		       11		      .byte.b	%00010001	;   #	 #
    747  f333		       11		      .byte.b	%00010001	;   #	 #
    748  f334		       11		      .byte.b	%00010001	;   #	 #
    749  f335		       11		      .byte.b	%00010001	;   #	 #
    750  f336
    751  f336		       77		      .byte.b	%01110111	; ### ###
    752  f337		       55		      .byte.b	%01010101	; # # # #
    753  f338		       77		      .byte.b	%01110111	; ### ###
    754  f339		       55		      .byte.b	%01010101	; # # # #
    755  f33a		       77		      .byte.b	%01110111	; ### ###
    756  f33b
    757  f33b		       77		      .byte.b	%01110111	; ### ###
    758  f33c		       55		      .byte.b	%01010101	; # # # #
    759  f33d		       77		      .byte.b	%01110111	; ### ###
    760  f33e		       11		      .byte.b	%00010001	;   #	 #
    761  f33f		       77		      .byte.b	%01110111	; ### ###
    762  f340
    763  f340		       22		      .byte.b	%00100010	;  #	#
    764  f341		       55		      .byte.b	%01010101	; # # # #
    765  f342		       77		      .byte.b	%01110111	; ### ###
    766  f343		       55		      .byte.b	%01010101	; # # # #
    767  f344		       55		      .byte.b	%01010101	; # # # #
    768  f345
    769  f345		       77		      .byte.b	%01110111	; ### ###
    770  f346		       55		      .byte.b	%01010101	; # # # #
    771  f347		       66		      .byte.b	%01100110	; ##  ##
    772  f348		       55		      .byte.b	%01010101	; # # # #
    773  f349		       77		      .byte.b	%01110111	; ### ###
    774  f34a
    775  f34a		       77		      .byte.b	%01110111	; ### ###
    776  f34b		       44		      .byte.b	%01000100	; #   #
    777  f34c		       44		      .byte.b	%01000100	; #   #
    778  f34d		       44		      .byte.b	%01000100	; #   #
    779  f34e		       77		      .byte.b	%01110111	; ### ###
    780  f34f
    781  f34f		       66		      .byte.b	%01100110	; ##  ##
    782  f350		       55		      .byte.b	%01010101	; # # # #
    783  f351		       55		      .byte.b	%01010101	; # # # #
    784  f352		       55		      .byte.b	%01010101	; # # # #
    785  f353		       66		      .byte.b	%01100110	; ##  ##
    786  f354
    787  f354		       77		      .byte.b	%01110111	; ### ###
    788  f355		       44		      .byte.b	%01000100	; #   #
    789  f356		       77		      .byte.b	%01110111	; ### ###
    790  f357		       44		      .byte.b	%01000100	; #   #
    791  f358		       77		      .byte.b	%01110111	; ### ###
    792  f359
    793  f359		       77		      .byte.b	%01110111	; ### ###
    794  f35a		       44		      .byte.b	%01000100	; #   #
    795  f35b		       66		      .byte.b	%01100110	; ##  ##
    796  f35c		       44		      .byte.b	%01000100	; #   #
    797  f35d		       44		      .byte.b	%01000100	; #   #
    798  f35e
    799  f35e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    800  f35e							;; Complete ROM size with 4KB
    801  f35e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    802  fffc					      org	$FFFC
    803  fffc		       00 f0		      .word.w	Reset
    804  fffe		       00 f0		      .word.w	Reset
